{"version":3,"sources":["covers/model1/index.js","App.js","index.js"],"names":["Container","styled","div","props","color","Title","p","ImageContainer","Image","img","Model1","ref","generatedContentRef","title","image","allowAnyClick","axis","handle","defaultPosition","x","y","grid","scale","className","src","App","useState","setTitle","setColor","file","setFile","useRef","useEffect","getHeightAndWidthFromDataUrl","then","obj","console","log","dataURL","Promise","resolve","onload","height","width","type","value","onChange","e","target","files","hex","URL","createObjectURL","onClick","domtoimage","toBlob","current","quality","dataUrl","FileSaver","saveAs","ReactDOM","render","document","getElementById"],"mappings":"6OAIMA,EAAYC,IAAOC,IAAV,4KAGK,SAACC,GAAD,OAAWA,EAAMC,SAO/BC,EAAQJ,IAAOK,EAAV,6LAWLC,EAAiBN,IAAOC,IAAV,gIAQdM,EAAQP,IAAOQ,IAAV,8DAKI,SAASC,EAAOP,GAC3B,OACA,eAACH,EAAD,CAAWW,IAAKR,EAAMS,oBAAqBR,MAAOD,EAAMC,MAAxD,UACA,cAACC,EAAD,UAAQF,EAAMU,QAEd,cAACN,EAAD,UACGJ,EAAMW,OAAS,cAAC,IAAD,CAChBC,eAAe,EACbC,KAAK,IACLC,OAAO,UACPC,gBAAiB,CAACC,EAAG,EAAGC,EAAG,GAC3BC,KAAM,CAAC,EAAG,GACVC,MAAO,EANO,SAOd,cAAC,EAAD,CAAOC,UAAU,SAASC,IAAKrB,EAAMW,eC1C7C,IAAMd,EAAYC,IAAOC,IAAV,qIAQA,SAASuB,IAAO,IAAD,EACFC,mBAAS,sBADP,mBACrBb,EADqB,KACdc,EADc,OAEFD,mBAAS,WAFP,mBAErBtB,EAFqB,KAEdwB,EAFc,OAGJF,mBAAS,MAHL,mBAGrBG,EAHqB,KAGfC,EAHe,KAKtBlB,EAAsBmB,iBAAO,MAEnCC,qBAAU,WAEJH,GACFI,EAA6BJ,GAAMK,MAAK,SAACC,GACvCC,QAAQC,IAAI,CAAEF,aAIjB,CAACN,IAEJ,IAAMI,EAA+B,SAAAK,GAAO,OAAI,IAAIC,SAAQ,SAAAC,GAC1D,IAAM/B,EAAM,IAAID,MAChBC,EAAIgC,OAAS,WACXD,EAAQ,CACNE,OAAQjC,EAAIiC,OACZC,MAAOlC,EAAIkC,SAGflC,EAAIe,IAAMc,MAcZ,OACE,eAAC,EAAD,WACE,uBAAOM,KAAK,OAAOC,MAAOhC,EAAOiC,SAAU,SAAAC,GAAC,OAAIpB,EAASoB,EAAEC,OAAOH,UAClE,uBAAOD,KAAK,OAAOE,SAAU,SAAAC,GAAC,OAAIjB,EAAQiB,EAAEC,OAAOC,MAAM,OACzD,cAAC,IAAD,CAAc7C,MAAOA,EAAO0C,SAAU,SAAA1C,GAAK,OAAIwB,EAASxB,EAAM8C,QAC9D,cAACxC,EAAD,CACEE,oBAAqBA,EACrBC,MAAOA,EACPT,MAAOA,EACPU,MAAOe,GAAQsB,IAAIC,gBAAgBvB,KACrC,wBAAQwB,QApBZ,WAEEC,IAAWC,OAAO3C,EAAoB4C,QAAS,CAAEC,QAAS,EAAGnC,MAAO,IAAKY,MAAK,SAACwB,GAC7EC,IAAUC,OAAOF,EAAS,iBAiB1B,+BC9DNG,IAASC,OACL,cAACrC,EAAD,IACFsC,SAASC,eAAe,W","file":"static/js/main.2552ac1b.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport Draggable from 'react-draggable';\n\nconst Container = styled.div`\nwidth: 240px;\nheight: 240px;\nbackground-color: ${(props) => props.color};\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\n`;\n\nconst Title = styled.p`\nfont-family: Arial;\nfont-style: normal;\nfont-weight: bold;\nfont-size: 26px;\nline-height: 1;\ntext-align: center;\nletter-spacing: -0.04em;\ncolor: #FFFFFF;\n`;\n\nconst ImageContainer = styled.div`\n  width: 210px;\n  height: 130px;\n  background: #fff;\n  position: relative;\n  overflow: hidden;\n`;\n\nconst Image = styled.img`\nwidth: 210px;\ncursor: grabbing;\n`;\n\nexport default function Model1(props) {\n    return (\n    <Container ref={props.generatedContentRef} color={props.color}>\n    <Title>{props.title}</Title>\n    \n    <ImageContainer>\n      {props.image && <Draggable\n      allowAnyClick={true}\n        axis=\"y\"\n        handle=\".handle\"\n        defaultPosition={{x: 0, y: 0}}\n        grid={[1, 1]}\n        scale={1}>\n        <Image className=\"handle\" src={props.image} />\n        </Draggable>}\n      </ImageContainer>\n      </Container>\n      );\n    }","import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport domtoimage from 'dom-to-image-more'\nimport FileSaver from 'file-saver';\nimport { ChromePicker } from 'react-color';\n\n\nimport Model1 from './covers/model1';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100vw;\n  height: 100vh;\n`;\n\nexport default function App() {\n  const [title, setTitle] = useState('Your playlist name');\n  const [color, setColor] = useState('#7900D9');\n  const [file, setFile] = useState(null);\n\n  const generatedContentRef = useRef(null);\n\n  useEffect(() => {\n\n    if (file) {\n      getHeightAndWidthFromDataUrl(file).then((obj) => {\n        console.log({ obj });\n      })\n    }\n\n  }, [file]);\n\n  const getHeightAndWidthFromDataUrl = dataURL => new Promise(resolve => {\n    const img = new Image()\n    img.onload = () => {\n      resolve({\n        height: img.height,\n        width: img.width\n      })\n    }\n    img.src = dataURL\n  })\n\n\n  function createImageToDownload() {\n    // Generate meme image from the content of 'content' div\n    domtoimage.toBlob(generatedContentRef.current, { quality: 1, scale: 3 }).then((dataUrl) => {\n      FileSaver.saveAs(dataUrl, \"cover.png\");    \n    })\n  }\n\n  \n  \n\n  return (\n    <Container>\n      <input type=\"text\" value={title} onChange={e => setTitle(e.target.value)} />\n      <input type=\"file\" onChange={e => setFile(e.target.files[0])} />\n      <ChromePicker color={color} onChange={color => setColor(color.hex)} />\n      <Model1\n        generatedContentRef={generatedContentRef}\n        title={title}\n        color={color}\n        image={file && URL.createObjectURL(file)} />\n      <button onClick={createImageToDownload}>Download Image</button>\n    </Container>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}